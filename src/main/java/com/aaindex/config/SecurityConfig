package com.example.demo.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrations;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    private static final Logger log = LoggerFactory.getLogger(SecurityConfig.class);

    @Value("${enable_csrf}")
    private Boolean enableCsrf;

    @Value("#{'${cors.allowed_origins}'.split(',')}")
    private Set<String> corsAllowedOrigins;

    @Value("#{'${cors.allowed_methods}'.split(',')}")
    private Set<String> corsAllowedMethods;

    @Value("${cors.allow_credentials}")
    private Boolean corsAllowCredentials;

    @Value("${cors.expose_headers}")
    private String[] corsExposeHeaders;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http, RelyingPartyRegistrationRepository relyingPartyRegistrationRepository) throws Exception {
        http
                .authorizeRequests(authorize -> authorize
                        .requestMatchers("/ingest/**", "/actuator/**", "/saml/**", "/samlsso/**", "/aaindex/**", "/public/**").permitAll()
                        .anyRequest().authenticated()
                )
                .saml2Login(saml2Login -> saml2Login
                        .relyingPartyRegistrationRepository(relyingPartyRegistrationRepository)
                )
                .csrf(csrf -> {
                    if (!enableCsrf) {
                        csrf.disable();
                    }
                })
                .cors().configurationSource(corsConfigurationSource());

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        log.info("Registering CORS allowed origins: " + corsAllowedOrigins.toString());
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(new ArrayList<>(corsAllowedOrigins));
        configuration.setAllowedMethods(new ArrayList<>(corsAllowedMethods));
        configuration.setAllowCredentials(corsAllowCredentials);
        configuration.setExposedHeaders(Arrays.asList(corsExposeHeaders));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public RelyingPartyRegistrationRepository relyingPartyRegistrationRepository() {
        RelyingPartyRegistration registration = RelyingPartyRegistrations
                .fromMetadataLocation("https://localhost:9443/samlsso/metadata") // Replace with your IDP metadata URL
                .registrationId("localhost-8443") // A unique identifier for the registration
                .entityId("https://localhost:8443/aaindex/saml/sso") // Your Service Provider Entity ID
                .build();

        return new InMemoryRelyingPartyRegistrationRepository(registration);
    }
}
